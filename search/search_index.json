{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenTelemetry logpusher Push OpenTelemetry log lines easily to a collector. Watch: logpusher in Action Want to do the same thing with OpenTelemetry spans and traces? Try tracepusher . Uses Push OpenTelemetry compatible logs from any script, pipeline or process Correlate log entries with OpenTelemetry traces Try Logpusher See try logpusher Quick Start ./logpusher \\ --endpoint http(s)://COLLECTOR-URL:4318 \\ --content \"This is my log line\" Advanced Usage Correlating Logs to OpenTelemetry Traces Docker usage Python usage CI usage Log Attributes logpusher reference page Try In Browser See try logpusher in-browser without installation . Python3 Usage See use logpusher as a Python script . Docker Usage See use logpusher as a docker image . CI Usage See run a CI pipeline step as a docker image with logpusher . Dry Run Mode See dry run mode flag . Debug Mode See debug mode flag . Time Shifting See time shifting . Log Attributes See log attribute types Spin up OpenTelemetry Collector See OpenTelemetry Collector configuration Adopters Do you use logpusher? Thanks and we'd love to know! Submit a PR and add your details to ADOPTERS.md FAQs See FAQ . Breaking Changes See Breaking changes Building Run all build commands from the root directory: docker buildx build --platform linux/arm64,linux/amd64 --push -t logpusher:dev-ci -f ./docker/ci/Dockerfile . docker buildx build --platform linux/arm64,linux/amd64 --push -t logpusher:dev -f ./docker/standard/Dockerfile . Contributing All contributions are most welcome! Get involved: - Tackle a good first issue - Create an issue to suggest something new - File a PR to fix something Made with contrib.rocks .","title":"Home"},{"location":"#opentelemetry-logpusher","text":"Push OpenTelemetry log lines easily to a collector.","title":"OpenTelemetry logpusher"},{"location":"#watch-logpusher-in-action","text":"Want to do the same thing with OpenTelemetry spans and traces? Try tracepusher .","title":"Watch: logpusher in Action"},{"location":"#uses","text":"Push OpenTelemetry compatible logs from any script, pipeline or process Correlate log entries with OpenTelemetry traces","title":"Uses"},{"location":"#try-logpusher","text":"See try logpusher","title":"Try Logpusher"},{"location":"#quick-start","text":"./logpusher \\ --endpoint http(s)://COLLECTOR-URL:4318 \\ --content \"This is my log line\"","title":"Quick Start"},{"location":"#advanced-usage","text":"Correlating Logs to OpenTelemetry Traces Docker usage Python usage CI usage Log Attributes logpusher reference page","title":"Advanced Usage"},{"location":"#try-in-browser","text":"See try logpusher in-browser without installation .","title":"Try In Browser"},{"location":"#python3-usage","text":"See use logpusher as a Python script .","title":"Python3 Usage"},{"location":"#docker-usage","text":"See use logpusher as a docker image .","title":"Docker Usage"},{"location":"#ci-usage","text":"See run a CI pipeline step as a docker image with logpusher .","title":"CI Usage"},{"location":"#dry-run-mode","text":"See dry run mode flag .","title":"Dry Run Mode"},{"location":"#debug-mode","text":"See debug mode flag .","title":"Debug Mode"},{"location":"#time-shifting","text":"See time shifting .","title":"Time Shifting"},{"location":"#log-attributes","text":"See log attribute types","title":"Log Attributes"},{"location":"#spin-up-opentelemetry-collector","text":"See OpenTelemetry Collector configuration","title":"Spin up OpenTelemetry Collector"},{"location":"#adopters","text":"Do you use logpusher? Thanks and we'd love to know! Submit a PR and add your details to ADOPTERS.md","title":"Adopters"},{"location":"#faqs","text":"See FAQ .","title":"FAQs"},{"location":"#breaking-changes","text":"See Breaking changes","title":"Breaking Changes"},{"location":"#building","text":"Run all build commands from the root directory: docker buildx build --platform linux/arm64,linux/amd64 --push -t logpusher:dev-ci -f ./docker/ci/Dockerfile . docker buildx build --platform linux/arm64,linux/amd64 --push -t logpusher:dev -f ./docker/standard/Dockerfile .","title":"Building"},{"location":"#contributing","text":"All contributions are most welcome! Get involved: - Tackle a good first issue - Create an issue to suggest something new - File a PR to fix something Made with contrib.rocks .","title":"Contributing"},{"location":"adopters/","text":"Do you use logpusher? Thanks! We'd love to know. Add your details to ADOPTERS.md","title":"Adopters"},{"location":"breaking-changes/","text":"None so far!","title":"Breaking changes"},{"location":"faq/","text":"Why Does This Exist? This tool makes it easy to send log lines to an OpenTelemetry collector, from anywhere. Any tool or process can now be the source for OpenTelemetry log lines. No extra receivers, plugins or pipelines required - just native support for log line ingest - easily. This tool also makes it easy to correlate log lines with OpenTelemetry traces. If you are interested in OpenTelemetry traces, check out tracepusher - the equivalent to this tool - but for traces.","title":"FAQ"},{"location":"faq/#why-does-this-exist","text":"This tool makes it easy to send log lines to an OpenTelemetry collector, from anywhere. Any tool or process can now be the source for OpenTelemetry log lines. No extra receivers, plugins or pipelines required - just native support for log line ingest - easily. This tool also makes it easy to correlate log lines with OpenTelemetry traces. If you are interested in OpenTelemetry traces, check out tracepusher - the equivalent to this tool - but for traces.","title":"Why Does This Exist?"},{"location":"try/","text":"Try Logpusher without Installation Try logpusher from your browser, with nothing to install. logpusher with open source software (Loki & Grafana) logpusher with Dynatrace Use logpusher logpusher can be used either via a standalone binary (preferred) , docker image , CI-ready docker image or Python script .","title":"Try logpusher"},{"location":"try/#try-logpusher-without-installation","text":"Try logpusher from your browser, with nothing to install. logpusher with open source software (Loki & Grafana) logpusher with Dynatrace","title":"Try Logpusher without Installation"},{"location":"try/#use-logpusher","text":"logpusher can be used either via a standalone binary (preferred) , docker image , CI-ready docker image or Python script .","title":"Use logpusher"},{"location":"reference/","text":"Technical Reference Pages Advances Usecases Correlating Logs to Traces Adding Log Attributes Flags Reference Debug Mode Flag Dry Run Flag Attributes Time Shifting Timestamp Trace ID Span ID Insecure Flag","title":"Reference Pages"},{"location":"reference/#technical-reference-pages","text":"","title":"Technical Reference Pages"},{"location":"reference/#advances-usecases","text":"Correlating Logs to Traces Adding Log Attributes","title":"Advances Usecases"},{"location":"reference/#flags-reference","text":"Debug Mode Flag Dry Run Flag Attributes Time Shifting Timestamp Trace ID Span ID Insecure Flag","title":"Flags Reference"},{"location":"reference/attribute-types/","text":"Attribute Types The optional -attrs or equivalent long form version: --attributes exists to add attributes to the logs that logpusher creates. Add as many attributes as you like. Formatting Attributes Logpusher will accept two possible inputs: --attributes foo=bar --attributes foo=bar=<TYPE> In the first, the value is assumed to be of type stringValue . In the second, you specify the value type. Possible types are: stringValue , boolValue , intValue , doubleValue , arrayValue , kvlistValue or bytesValue . Separate each attribute with a space. python logpusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --content \"This is my log line\" \\ --attributes foo=bar foo2=23=intValue docker run gardnera/logpusher:v0.1.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --content \"This is my log line\" \\ -attrs foo=bar foo2=bar2=stringValue Valid Types The following are all valid: stringValue boolValue intValue doubleValue arrayValue kvlistValue bytesValue","title":"Attribute types"},{"location":"reference/attribute-types/#attribute-types","text":"The optional -attrs or equivalent long form version: --attributes exists to add attributes to the logs that logpusher creates. Add as many attributes as you like.","title":"Attribute Types"},{"location":"reference/attribute-types/#formatting-attributes","text":"Logpusher will accept two possible inputs: --attributes foo=bar --attributes foo=bar=<TYPE> In the first, the value is assumed to be of type stringValue . In the second, you specify the value type. Possible types are: stringValue , boolValue , intValue , doubleValue , arrayValue , kvlistValue or bytesValue . Separate each attribute with a space. python logpusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --content \"This is my log line\" \\ --attributes foo=bar foo2=23=intValue docker run gardnera/logpusher:v0.1.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --content \"This is my log line\" \\ -attrs foo=bar foo2=bar2=stringValue","title":"Formatting Attributes"},{"location":"reference/attribute-types/#valid-types","text":"The following are all valid: stringValue boolValue intValue doubleValue arrayValue kvlistValue bytesValue","title":"Valid Types"},{"location":"reference/correlating-logs-to-traces/","text":"Correlating Logs to Traces Log entries sent by logpusher can be correlated with any OpenTelemetry spans / traces (if you need an easy way to generate spans and traces, try tracepusher ). Adding Trace ID and Span ID Your OpenTelemetry platform of choice needs two pieces of information to tie the log line to the span: The span ID The trace ID These are added as additional commands when you use logpusher: ./logpusher \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --content \"This is my log line\" \\ --trace-id \"TRACE-ID-GOES-HERE\" \\ --span-id \"SPAN-ID-GOES-HERE\"","title":"Correlating logs to traces"},{"location":"reference/correlating-logs-to-traces/#correlating-logs-to-traces","text":"Log entries sent by logpusher can be correlated with any OpenTelemetry spans / traces (if you need an easy way to generate spans and traces, try tracepusher ).","title":"Correlating Logs to Traces"},{"location":"reference/correlating-logs-to-traces/#adding-trace-id-and-span-id","text":"Your OpenTelemetry platform of choice needs two pieces of information to tie the log line to the span: The span ID The trace ID These are added as additional commands when you use logpusher: ./logpusher \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --content \"This is my log line\" \\ --trace-id \"TRACE-ID-GOES-HERE\" \\ --span-id \"SPAN-ID-GOES-HERE\"","title":"Adding Trace ID and Span ID"},{"location":"reference/debug-mode/","text":"Debug Mode Add -x True or --debug True for extra output","title":"Debug mode"},{"location":"reference/debug-mode/#debug-mode","text":"Add -x True or --debug True for extra output","title":"Debug Mode"},{"location":"reference/dry-run-mode/","text":"Dry Run Mode Add -dr true , --dry-run true or --dry true to run without actually pushing any data.","title":"Dry run mode"},{"location":"reference/dry-run-mode/#dry-run-mode","text":"Add -dr true , --dry-run true or --dry true to run without actually pushing any data.","title":"Dry Run Mode"},{"location":"reference/insecure-flag/","text":"Insecure Flag Introduced in v0.2.0 Default: false The optional -insec [false|true] or --insecure [false|true] flag exists to encourage \"secure by default\" practices by encouraging the sending of span only to https:// endpoints. However, logpusher does still work with http:// endpoints. The --insecure flag affects whether or not logpusher will connect to insecure http:// endpoints. The --insecure flag operation differs by version. v0.1.* The --insecure flag is not available. v0.2.* The --insecure flag defaults to false with the intention of meaning insecure endpoints are not allowed. However, to provide ample migration time for end users, the behaviour is as follows: --insecure flag is omitted This is the expected behaviour of everyone migrating from v0.1 to v0.2. The flag defaults to false BUT will still allow http:// endpoints, just like before. Logpusher will emit a soft WARNING message to inform users of the upcoming breaking change, like this: WARN: --insecure flag is omitted or is set to false. Prior to v0.3.0 logpusher still works as expected (span is sent). In v0.3.0 and above, you MUST set '--insecure true' if you want to send to an http:// endpoint. See https://github.com/agardnerIT/logpusher/issues/18 --insecure flag is explicitly set to false From v0.3 upwards, users are encouraged to get into the best practice habit of explicitly setting this to false or true . Otherwise, for v0.2.*, the behaviour is as above. v0.3 If the --insecure flag is omitted or explicitly set to false , calls to http:// endpoints will be BLOCKED . Calls to http:// endpoints MUST be accompanied with the --insecure true flag or calls will be blocked with this error: ERROR: Endpoint is http:// (insecure). You MUST set '--insecure true'. Log has NOT been sent.","title":"Insecure flag"},{"location":"reference/insecure-flag/#insecure-flag","text":"Introduced in v0.2.0 Default: false The optional -insec [false|true] or --insecure [false|true] flag exists to encourage \"secure by default\" practices by encouraging the sending of span only to https:// endpoints. However, logpusher does still work with http:// endpoints. The --insecure flag affects whether or not logpusher will connect to insecure http:// endpoints. The --insecure flag operation differs by version.","title":"Insecure Flag"},{"location":"reference/insecure-flag/#v01","text":"The --insecure flag is not available.","title":"v0.1.*"},{"location":"reference/insecure-flag/#v02","text":"The --insecure flag defaults to false with the intention of meaning insecure endpoints are not allowed. However, to provide ample migration time for end users, the behaviour is as follows:","title":"v0.2.*"},{"location":"reference/insecure-flag/#-insecure-flag-is-omitted","text":"This is the expected behaviour of everyone migrating from v0.1 to v0.2. The flag defaults to false BUT will still allow http:// endpoints, just like before. Logpusher will emit a soft WARNING message to inform users of the upcoming breaking change, like this: WARN: --insecure flag is omitted or is set to false. Prior to v0.3.0 logpusher still works as expected (span is sent). In v0.3.0 and above, you MUST set '--insecure true' if you want to send to an http:// endpoint. See https://github.com/agardnerIT/logpusher/issues/18","title":"--insecure flag is omitted"},{"location":"reference/insecure-flag/#-insecure-flag-is-explicitly-set-to-false","text":"From v0.3 upwards, users are encouraged to get into the best practice habit of explicitly setting this to false or true . Otherwise, for v0.2.*, the behaviour is as above.","title":"--insecure flag is explicitly set to false"},{"location":"reference/insecure-flag/#v03","text":"If the --insecure flag is omitted or explicitly set to false , calls to http:// endpoints will be BLOCKED . Calls to http:// endpoints MUST be accompanied with the --insecure true flag or calls will be blocked with this error: ERROR: Endpoint is http:// (insecure). You MUST set '--insecure true'. Log has NOT been sent.","title":"v0.3"},{"location":"reference/otel-col/","text":"This page shows sample configuration and instructions for creating an OpenTelemetry Collector. Specifically, the config.yaml shows how to send traces to Dynatrace as a backend. If you need Dynatrace tenant, click here to signup for a free trial . Download Collector The Python script will generate and push a trace to an OpenTelemetry collector. So of course, you need one available. If you have a collector already available, go on ahead to run the tool. If you don't have one already available, follow these steps. Download and extract the collector binary for your platform from here . For example, for windows: https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.78.0/otelcol-contrib_0.78.0_windows_amd64.tar.gz Unzip and extract so you have the binary (eg. otelcol.exe ) Create config.yaml The OpenTelemetry collector needs a config file - this is how you decide which trace backend the traces will go to. Save this file alongside otelcol.exe as config.yaml . You will need to modify the otlphttp code for your backend. The example given is for Dynatrace trace ingest. For Dynatrace, the API token needs Ingest OpenTelemetry traces permissions. receivers: otlp: protocols: grpc: http: exporters: logging: verbosity: detailed otlphttp: endpoint: https://abc12345.live.dynatrace.com/api/v2/otlp headers: Authorization: \"Api-Token dt0c01.sample.secret\" service: extensions: [] pipelines: logs: receivers: [otlp] processors: [] exporters: [logging,otlphttp] Start The Collector Open a command / terminal window and run: otelcol.exe --config config.yaml Then run logpusher: ./logpusher.py --endpoint http://localhost:4318 --content \"This is my log line\"","title":"Otel col"},{"location":"reference/otel-col/#download-collector","text":"The Python script will generate and push a trace to an OpenTelemetry collector. So of course, you need one available. If you have a collector already available, go on ahead to run the tool. If you don't have one already available, follow these steps. Download and extract the collector binary for your platform from here . For example, for windows: https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.78.0/otelcol-contrib_0.78.0_windows_amd64.tar.gz Unzip and extract so you have the binary (eg. otelcol.exe )","title":"Download Collector"},{"location":"reference/otel-col/#create-configyaml","text":"The OpenTelemetry collector needs a config file - this is how you decide which trace backend the traces will go to. Save this file alongside otelcol.exe as config.yaml . You will need to modify the otlphttp code for your backend. The example given is for Dynatrace trace ingest. For Dynatrace, the API token needs Ingest OpenTelemetry traces permissions. receivers: otlp: protocols: grpc: http: exporters: logging: verbosity: detailed otlphttp: endpoint: https://abc12345.live.dynatrace.com/api/v2/otlp headers: Authorization: \"Api-Token dt0c01.sample.secret\" service: extensions: [] pipelines: logs: receivers: [otlp] processors: [] exporters: [logging,otlphttp]","title":"Create config.yaml"},{"location":"reference/otel-col/#start-the-collector","text":"Open a command / terminal window and run: otelcol.exe --config config.yaml Then run logpusher: ./logpusher.py --endpoint http://localhost:4318 --content \"This is my log line\"","title":"Start The Collector"},{"location":"reference/span-id/","text":"Span ID Flag The optional -sid or equivalent long form version: --span-id exists to provide a way to correlate this log line with an OpenTelemetry span ID. Valid OTEL Trace ID Length A valid OpenTelemetry Span ID is 16 hexidecimal characters long.","title":"Span id"},{"location":"reference/span-id/#span-id-flag","text":"The optional -sid or equivalent long form version: --span-id exists to provide a way to correlate this log line with an OpenTelemetry span ID.","title":"Span ID Flag"},{"location":"reference/span-id/#valid-otel-trace-id-length","text":"A valid OpenTelemetry Span ID is 16 hexidecimal characters long.","title":"Valid OTEL Trace ID Length"},{"location":"reference/time-shift/","text":"Time Shifting Use the --time-shift N parameter to move move the timestamp of your log file back by N seconds. For example, --time-shift 2 sets the log timestamp to 2 seconds ago.","title":"Time shift"},{"location":"reference/time-shift/#time-shifting","text":"Use the --time-shift N parameter to move move the timestamp of your log file back by N seconds. For example, --time-shift 2 sets the log timestamp to 2 seconds ago.","title":"Time Shifting"},{"location":"reference/timestamp/","text":"Timestamp The optional -t parameter, or the equivalent long form version --timestamp makes is possible for to specify a custom log timestamp. If not set, logpusher sets the log timestamp as now . Timestamp Format The -t or --timestamp parameter is expected in nanoseconds of time since the unix epoch. Hint: Grab the value from this website then add 9 zeros. For example 1687169964000000000","title":"Timestamp"},{"location":"reference/timestamp/#timestamp","text":"The optional -t parameter, or the equivalent long form version --timestamp makes is possible for to specify a custom log timestamp. If not set, logpusher sets the log timestamp as now .","title":"Timestamp"},{"location":"reference/timestamp/#timestamp-format","text":"The -t or --timestamp parameter is expected in nanoseconds of time since the unix epoch. Hint: Grab the value from this website then add 9 zeros. For example 1687169964000000000","title":"Timestamp Format"},{"location":"reference/trace-id/","text":"Trace ID Flag The optional -tid or equivalent long form version: --trace-id exists to provide a way to correlate this log line with an OpenTelemetry trace ID. Valid OTEL Trace ID Length A valid OpenTelemetry Trace ID is 32 hexidecimal characters long.","title":"Trace id"},{"location":"reference/trace-id/#trace-id-flag","text":"The optional -tid or equivalent long form version: --trace-id exists to provide a way to correlate this log line with an OpenTelemetry trace ID.","title":"Trace ID Flag"},{"location":"reference/trace-id/#valid-otel-trace-id-length","text":"A valid OpenTelemetry Trace ID is 32 hexidecimal characters long.","title":"Valid OTEL Trace ID Length"},{"location":"usage/","text":"Use logpusher in various contexts Standalone Binary For most, this will be the preferred way to run logpusher. Download the relevant binary from the releases page on GitHub and execute. See run logpusher as a standalone binary for more information. Docker Use logpusher as a Docker image Docker CI-ready Image logpusher inside a Docker image w/ extra tools Useful for running CI pipelines in container images. Python Run logpusher as a Python script .","title":"Usage"},{"location":"usage/#use-logpusher-in-various-contexts","text":"","title":"Use logpusher in various contexts"},{"location":"usage/#standalone-binary","text":"For most, this will be the preferred way to run logpusher. Download the relevant binary from the releases page on GitHub and execute. See run logpusher as a standalone binary for more information.","title":"Standalone Binary"},{"location":"usage/#docker","text":"Use logpusher as a Docker image","title":"Docker"},{"location":"usage/#docker-ci-ready-image","text":"logpusher inside a Docker image w/ extra tools Useful for running CI pipelines in container images.","title":"Docker CI-ready Image"},{"location":"usage/#python","text":"Run logpusher as a Python script .","title":"Python"},{"location":"usage/ci/","text":"logpusher CI-ready image It is now generally preferred to use the standalone binary . The CI image may be deprecated in the future. The gardnera/logpusher:v0.1.0-ci image is CI ready. This containers drops you into a normal shell where you have access to logpusher. Logpusher can be executed using Python from within this container. See Python usage instructions for more info.","title":"Usage > CI"},{"location":"usage/ci/#logpusher-ci-ready-image","text":"It is now generally preferred to use the standalone binary . The CI image may be deprecated in the future. The gardnera/logpusher:v0.1.0-ci image is CI ready. This containers drops you into a normal shell where you have access to logpusher. Logpusher can be executed using Python from within this container. See Python usage instructions for more info.","title":"logpusher CI-ready image"},{"location":"usage/docker/","text":"Requirements and Prequisites A running OpenTelemetry collector (see below) Docker Basic Docker Usage docker run gardnera/logpusher:v0.1.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -c \"This is my log line\" Optional Parameters --attributes key=value key2=value2=type --timestamp <timeUnixNanos> eg. 1686545492000000000 --time-shift <seconds to shift log time backwards eg. 2> --trace-id <32 character hex id> --span-id <16 character hex id> --dry-run true|false --debug true|false --insecure true| false For attribute types, see Attribute Types . To correlate log lines to traces, see correlating logs to traces","title":"Usage > Docker"},{"location":"usage/docker/#requirements-and-prequisites","text":"A running OpenTelemetry collector (see below) Docker","title":"Requirements and Prequisites"},{"location":"usage/docker/#basic-docker-usage","text":"docker run gardnera/logpusher:v0.1.0 \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -c \"This is my log line\"","title":"Basic Docker Usage"},{"location":"usage/docker/#optional-parameters","text":"--attributes key=value key2=value2=type --timestamp <timeUnixNanos> eg. 1686545492000000000 --time-shift <seconds to shift log time backwards eg. 2> --trace-id <32 character hex id> --span-id <16 character hex id> --dry-run true|false --debug true|false --insecure true| false For attribute types, see Attribute Types . To correlate log lines to traces, see correlating logs to traces","title":"Optional Parameters"},{"location":"usage/python/","text":"Requirements and Prequisites A running OpenTelemetry collector (see below) Python + Requests module Basic Python Usage python3 logpusher.py -h or python3 logpusher.py --help shows help text. python logpusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --content \"A log line here\" Optional Parameters --attributes key=value [key2=value2...] --timestamp <timeUnixNanos> eg. 1686545492000000000 --time-shift <seconds to shift log time backwards eg. 2> --trace-id <32 character hex id> --span-id <16 character hex id> --dry-run true|false --debug true|false --insecure true| false For attributes, see Attributes . For the timestamp parameter, see timestamp For time shifting, see time shifting To correlate log lines to traces, see correlating logs to traces For dry run mode, see dry run mode For debug mode, see debug mode For the insecure flag, see insecure flag For information on span attributes and span attribute types, see Span Attribute Types . For multi-span traces, see multi span traces","title":"Usage > Python"},{"location":"usage/python/#requirements-and-prequisites","text":"A running OpenTelemetry collector (see below) Python + Requests module","title":"Requirements and Prequisites"},{"location":"usage/python/#basic-python-usage","text":"python3 logpusher.py -h or python3 logpusher.py --help shows help text. python logpusher.py \\ --endpoint http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ --content \"A log line here\"","title":"Basic Python Usage"},{"location":"usage/python/#optional-parameters","text":"--attributes key=value [key2=value2...] --timestamp <timeUnixNanos> eg. 1686545492000000000 --time-shift <seconds to shift log time backwards eg. 2> --trace-id <32 character hex id> --span-id <16 character hex id> --dry-run true|false --debug true|false --insecure true| false For attributes, see Attributes . For the timestamp parameter, see timestamp For time shifting, see time shifting To correlate log lines to traces, see correlating logs to traces For dry run mode, see dry run mode For debug mode, see debug mode For the insecure flag, see insecure flag For information on span attributes and span attribute types, see Span Attribute Types . For multi-span traces, see multi span traces","title":"Optional Parameters"},{"location":"usage/standalone/","text":"Download binary Download the relevant binary from the GitHub releases page . Run logpusher ./logpusher \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -c 'this is a log line' Optional Parameters --attributes key=value [key2=value2...] --timestamp <timeUnixNanos> eg. 1686545492000000000 --time-shift <seconds to shift log time backwards eg. 2> --trace-id <32 character hex id> --span-id <16 character hex id> --dry-run true|false --debug true|false --insecure true|false For documentation on all available flags, see the reference pages","title":"Download binary"},{"location":"usage/standalone/#download-binary","text":"Download the relevant binary from the GitHub releases page .","title":"Download binary"},{"location":"usage/standalone/#run-logpusher","text":"./logpusher \\ -ep http(s)://OTEL-COLLECTOR-ENDPOINT:4318 \\ -c 'this is a log line'","title":"Run logpusher"},{"location":"usage/standalone/#optional-parameters","text":"--attributes key=value [key2=value2...] --timestamp <timeUnixNanos> eg. 1686545492000000000 --time-shift <seconds to shift log time backwards eg. 2> --trace-id <32 character hex id> --span-id <16 character hex id> --dry-run true|false --debug true|false --insecure true|false For documentation on all available flags, see the reference pages","title":"Optional Parameters"}]}